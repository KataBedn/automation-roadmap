{"version":3,"sources":["components/PopupContent/index.js","components/SingleTree/index.js","components/App/index.js","index.js"],"names":["converter","showndown","Converter","PopupContent","data","color","map","popupDetails","Parser","makeHtml","description","Button","animated","size","href","url","target","Content","visible","urlLabel","hidden","Icon","name","SingleTree","inputArray","chunks","Segment","padded","tertiary","inverted","Grid","columns","stackable","reduce","resultArray","item","index","chunkIndex","Math","floor","push","Row","relaxed","skill","Column","textAlign","Header","Object","keys","values","subSkill","Popup","content","on","pinned","wide","hoverable","trigger","as","compact","fluid","App","icon","Divider","horizontal","roadmapData","beginner","intermediate","ReactDOM","render","document","getElementById"],"mappings":"gRAIMA,EAAY,IAAIC,IAAUC,UAgBjBC,EAfM,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,EAASC,MAAT,OACnB,4BACGD,EAAKE,KAAI,SAACC,GAAD,OACR,8BACE,4BAAIC,YAAOR,EAAUS,SAASF,EAAaG,gBAC3C,eAACC,EAAA,EAAD,CAAQC,UAAQ,EAACC,KAAK,SAASC,KAAMP,EAAaQ,IAAKC,OAAO,SAA9D,UACE,cAACL,EAAA,EAAOM,QAAR,CAAgBC,SAAO,EAAvB,SAAyBX,EAAaY,WACtC,cAACR,EAAA,EAAOM,QAAR,CAAgBG,QAAM,EAAtB,SACE,cAACC,EAAA,EAAD,CAAMC,KAAK,8BCoDRC,EAjDI,SAAC,GAAqB,IAbrBC,EAAYC,EAaVrB,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC1B,OACE,cAACqB,EAAA,EAAD,CAASC,QAAM,EAACC,UAAQ,EAACC,UAAQ,EAACxB,MAAOA,EAAzC,SACE,cAACyB,EAAA,EAAD,CAAMC,QAAQ,IAAIC,WAAS,EAA3B,UAhBcR,EAiBApB,EAjBYqB,EAiBN,EAhBjBD,EAAWS,QAAO,SAACC,EAAaC,EAAMC,GAC3C,IAAMC,EAAaC,KAAKC,MAAMH,EAAQX,GAQtC,OANKS,EAAYG,KACfH,EAAYG,GAAc,IAG5BH,EAAYG,GAAYG,KAAKL,GAEtBD,IACN,KAMwB5B,KAAI,SAAC6B,GAAD,OACvB,cAACL,EAAA,EAAKW,IAAN,CAAUC,SAAO,EAAjB,SACGP,EAAK7B,KAAI,SAACqC,GAAD,OACR,cAACb,EAAA,EAAKc,OAAN,UACE,eAAClB,EAAA,EAAD,CAASC,QAAM,EAACkB,UAAU,SAA1B,UACE,cAACC,EAAA,EAAD,CAAQjC,KAAK,SAASR,MAAM,QAA5B,SACG0C,OAAOC,KAAKL,KAEf,uBACA,cAACb,EAAA,EAAD,CAAMY,SAAO,EAACf,QAAM,EAApB,SACGoB,OAAOE,OAAON,GAAO,GAAGrC,KAAI,SAAC4C,GAAD,OAC3B,cAACpB,EAAA,EAAKW,IAAN,UACE,cAACU,EAAA,EAAD,CACEC,QACE,cAAC,EAAD,CAAchD,KAAM8C,EAAS9C,KAAMC,MAAOA,IAE5CgD,GAAG,QACHxC,KAAK,QACLyC,QAAM,EACNC,MAAI,EACJC,WAAS,EACTC,QACE,cAAC9C,EAAA,EAAD,CACE+C,GAAG,IACHC,SAAO,EACPC,OAAK,EACL/C,KAAK,QACLR,MAAOA,EACP+C,QAASF,EAAS5B,kCCtBjCuC,EApBH,WACV,OACE,eAACnC,EAAA,EAAD,WACE,eAACoB,EAAA,EAAD,CAAQY,GAAG,KAAKI,MAAI,EAACjB,UAAU,SAA/B,UACE,cAACxB,EAAA,EAAD,CAAMC,KAAK,SADb,wBAKA,cAACyC,EAAA,EAAD,CAASC,YAAU,EAAnB,sBACA,cAAC,EAAD,CAAY5D,KAAM6D,EAAYC,SAAU7D,MAAM,SAC9C,cAAC0D,EAAA,EAAD,CAASC,YAAU,EAAnB,0BACA,cAAC,EAAD,CAAY5D,KAAM6D,EAAYE,aAAc9D,MAAM,SAClD,cAAC0D,EAAA,EAAD,CAASC,YAAU,EAAnB,oBACA,cAACtC,EAAA,EAAD,CAASb,KAAK,QAAQR,MAAM,SAASwB,UAAQ,EAA7C,kECfNuC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.73afe836.chunk.js","sourcesContent":["import { Button, Icon } from \"semantic-ui-react\";\nimport showndown from \"showdown\";\nimport Parser from \"html-react-parser\";\n\nconst converter = new showndown.Converter();\nconst PopupContent = ({ data, color }) => (\n  <p>\n    {data.map((popupDetails) => (\n      <p>\n        <p>{Parser(converter.makeHtml(popupDetails.description))}</p>\n        <Button animated size=\"medium\" href={popupDetails.url} target=\"_blank\">\n          <Button.Content visible>{popupDetails.urlLabel}</Button.Content>\n          <Button.Content hidden>\n            <Icon name=\"arrow right\" />\n          </Button.Content>\n        </Button>\n      </p>\n    ))}\n  </p>\n);\nexport default PopupContent;\n","import { Popup, Grid, Segment, Header, Button } from \"semantic-ui-react\";\nimport PopupContent from \"../PopupContent\";\n\nconst sliceArray = (inputArray, chunks) => {\n  return inputArray.reduce((resultArray, item, index) => {\n    const chunkIndex = Math.floor(index / chunks);\n\n    if (!resultArray[chunkIndex]) {\n      resultArray[chunkIndex] = [];\n    }\n\n    resultArray[chunkIndex].push(item);\n\n    return resultArray;\n  }, []);\n};\nconst SingleTree = ({ data, color }) => {\n  return (\n    <Segment padded tertiary inverted color={color}>\n      <Grid columns=\"4\" stackable>\n        {sliceArray(data, 4).map((item) => (\n          <Grid.Row relaxed>\n            {item.map((skill) => (\n              <Grid.Column>\n                <Segment padded textAlign=\"center\">\n                  <Header size=\"medium\" color=\"black\">\n                    {Object.keys(skill)}\n                  </Header>\n                  <br />\n                  <Grid relaxed padded>\n                    {Object.values(skill)[0].map((subSkill) => (\n                      <Grid.Row>\n                        <Popup\n                          content={\n                            <PopupContent data={subSkill.data} color={color} />\n                          }\n                          on=\"click\"\n                          size=\"small\"\n                          pinned\n                          wide\n                          hoverable\n                          trigger={\n                            <Button\n                              as=\"a\"\n                              compact\n                              fluid\n                              size=\"small\"\n                              color={color}\n                              content={subSkill.name}\n                            />\n                          }\n                        />\n                      </Grid.Row>\n                    ))}\n                  </Grid>\n                </Segment>\n              </Grid.Column>\n            ))}\n          </Grid.Row>\n        ))}\n      </Grid>\n    </Segment>\n  );\n};\n\nexport default SingleTree;\n","import React from \"react\";\nimport { Segment, Divider, Header, Icon } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport roadmapData from \"../../data/roadmapData.json\";\nimport SingleTree from \"../SingleTree\";\n\nconst App = () => {\n  return (\n    <Segment>\n      <Header as=\"h2\" icon textAlign=\"center\">\n        <Icon name=\"road\" />\n        Automation roadmap\n      </Header>\n\n      <Divider horizontal>Beginner</Divider>\n      <SingleTree data={roadmapData.beginner} color=\"teal\" />\n      <Divider horizontal>Intermediate</Divider>\n      <SingleTree data={roadmapData.intermediate} color=\"blue\" />\n      <Divider horizontal>Expert</Divider>\n      <Segment size=\"large\" color=\"purple\" inverted>\n        Not available yet, work in progress ðŸ‘·\n      </Segment>\n    </Segment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}